// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?
// _________________---___--__--_--_--_-__-_______

// Method to find no of divisors
// if you have the prime factorization of the number n,then to calculate how many divisors it has, you take all the exponents in the factorization, add 1 to each, and then multiply these "exponents + 1"s together.

Map<int, int> getPrimeFactors(int number){
  Map<int, int> factors = {};
  var div = 2;
  while (number > 1){
    while(number % div == 0){
      factors.update(
          div,
          (previousVal) => ++previousVal,
          ifAbsent: () => 1,
        );
        number ~/= div;
    }
    div++;
  }
  return factors;
}

Stream<int> triangleNumberStream() async* {
  var n = 1;
  while(true){
    yield (n * (n + 1)) ~/ 2;
    n++;
  }
}

int getNoOfdivisors(int number){
  var primeFactors = getPrimeFactors(number);
  var noOfDiv = 1;
  primeFactors.values.forEach(
      (element) => noOfDiv *= (element + 1)
    );
  return noOfDiv;
}

void main() async {
  var divLimit = 500;
  await for(var triangleNum in triangleNumberStream()){
    var noOfDivivisors = getNoOfdivisors(triangleNum);
    print("$triangleNum: $noOfDivivisors");
    if (noOfDivivisors >= divLimit){
      print("Triangle Number with over $divLimit divisors is -> $triangleNum with $noOfDivivisors divisors");
      break; 
    }
  }
}
